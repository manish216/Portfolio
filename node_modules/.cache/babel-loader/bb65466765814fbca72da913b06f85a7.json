{"ast":null,"code":"var _jsxFileName = \"A:\\\\EXCEL\\\\master's\\\\resume syncer\\\\portfolio\\\\src\\\\components\\\\Grid\\\\Grid.components.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Measure from 'react-measure';\nimport { Transition, animated, interpolate } from 'react-spring/renderprops';\nconst styles = {\n  outer: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    color: '#000'\n  },\n  inner: {\n    position: 'relative',\n    width: '100%',\n    overflow: 'hidden',\n    minHeight: '100%',\n    color: '#000'\n  },\n  cell: {\n    position: 'absolute',\n    willChange: 'transform, width, height, opacity'\n  }\n};\nexport default class Grid extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      width: 0,\n      height: 0,\n      open: undefined,\n      lastOpen: undefined\n    };\n\n    this.scrollOut = e => {\n      if (!this.props.lockScroll) {\n        this.state.open && this.toggle(undefined);\n        this.clicked = false;\n      }\n    };\n\n    this.toggle = key => this.setState(state => ({\n      lastOpen: state.open,\n      open: state.open === key ? undefined : key\n    }), () => this.clicked = true);\n\n    this.resize = (width, height, props) => this.setState({\n      [width]: props.client.width,\n      [height]: props.client.height\n    });\n\n    this.resizeOuter = props => this.resize('widthOuter', 'heightOuter', props);\n\n    this.resizeInner = props => this.resize('width', 'height', props);\n\n    this.update = ({\n      key,\n      x,\n      y,\n      width,\n      height\n    }) => {\n      const open = this.state.open === key;\n      return {\n        opacity: this.state.open && !open ? 0 : 1,\n        x: open ? this.outerRef.scrollLeft : x,\n        y: open ? this.outerRef.scrollTop : y,\n        width: open ? this.state.width : width,\n        height: open ? this.state.heightOuter : height\n      };\n    };\n  }\n\n  componentDidUpdate() {\n    this.clicked = false;\n  }\n\n  render() {\n    let {\n      children,\n      columns,\n      margin,\n      occupySpace,\n      impl,\n      config,\n      data,\n      keys,\n      heights,\n      closeDelay,\n      lockScroll,\n      ...rest\n    } = this.props;\n    let {\n      lastOpen,\n      open,\n      width\n    } = this.state;\n    let column = 0;\n    let columnHeights = new Array(columns).fill(0);\n    let displayData = data.map((child, i) => {\n      let index = occupySpace ? columnHeights.indexOf(Math.min(...columnHeights)) : column++ % columns;\n      let cellWidth = width / columns - margin / (1 - 1 / (columns + 1));\n      let left = cellWidth * index;\n      let offset = (index + 1) * margin;\n      let top = columnHeights[index] + margin;\n      let height = typeof heights === 'function' ? heights(child) : heights;\n      columnHeights[index] += height + margin;\n      return {\n        x: margin ? left + offset : left,\n        y: top,\n        width: cellWidth,\n        height,\n        key: keys(child),\n        object: child\n      };\n    });\n    const overflow = lockScroll ? open ? 'hidden' : 'auto' : 'auto';\n    const height = Math.max(...columnHeights) + margin;\n    return /*#__PURE__*/React.createElement(Measure, {\n      client: true,\n      innerRef: r => this.outerRef = r,\n      onResize: this.resizeOuter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, ({\n      measureRef\n    }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: measureRef,\n      style: { ...styles.outer,\n        ...this.props.style,\n        overflow\n      }\n    }, rest, {\n      onScroll: this.scrollOut,\n      onWheel: this.scrollOut,\n      onTouchMove: this.scrollOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Measure, {\n      client: true,\n      innerRef: r => this.innerRef = r,\n      onResize: this.resizeInner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, ({\n      measureRef\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: measureRef,\n      style: { ...styles.inner,\n        height\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Transition, {\n      native: true,\n      items: displayData,\n      keys: d => d.key,\n      from: {\n        opacity: 0\n      },\n      leave: {\n        opacity: 0\n      },\n      enter: this.update,\n      update: this.update,\n      impl: impl,\n      config: { ...config,\n        delay: this.clicked && !open ? closeDelay : 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, (c, i) => ({\n      opacity,\n      x,\n      y,\n      width,\n      height\n    }) => /*#__PURE__*/React.createElement(animated.div, {\n      style: { ...styles.cell,\n        opacity,\n        width,\n        height,\n        zIndex: lastOpen === c.key || open === c.key ? 1000 : i,\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px, 0)`)\n      },\n      children: children(c.object, open === c.key, () => this.toggle(c.key)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }))))));\n  }\n\n}\nGrid.propTypes = {\n  data: PropTypes.array,\n  keys: PropTypes.func,\n  occupySpace: PropTypes.bool,\n  columns: PropTypes.number,\n  margin: PropTypes.number,\n  heights: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  lockScroll: PropTypes.bool,\n  closeDelay: PropTypes.number\n};\nGrid.defaultProps = {\n  occupySpace: true,\n  columns: 3,\n  margin: 0,\n  heights: 400,\n  lockScroll: false,\n  closeDelay: 0\n};","map":{"version":3,"sources":["A:/EXCEL/master's/resume syncer/portfolio/src/components/Grid/Grid.components.jsx"],"names":["React","PropTypes","Measure","Transition","animated","interpolate","styles","outer","position","width","height","color","inner","overflow","minHeight","cell","willChange","Grid","Component","state","open","undefined","lastOpen","scrollOut","e","props","lockScroll","toggle","clicked","key","setState","resize","client","resizeOuter","resizeInner","update","x","y","opacity","outerRef","scrollLeft","scrollTop","heightOuter","componentDidUpdate","render","children","columns","margin","occupySpace","impl","config","data","keys","heights","closeDelay","rest","column","columnHeights","Array","fill","displayData","map","child","i","index","indexOf","Math","min","cellWidth","left","offset","top","object","max","r","measureRef","style","innerRef","d","delay","c","zIndex","transform","propTypes","array","func","bool","number","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Measure from 'react-measure';\r\nimport { Transition, animated, interpolate } from 'react-spring/renderprops';\r\n\r\nconst styles = {\r\n  outer: { position: 'relative', width: '100%', height: '100%',color:'#000' },\r\n  inner: {\r\n    position: 'relative',\r\n    width: '100%',\r\n    overflow: 'hidden',\r\n    minHeight: '100%',\r\n    color: '#000'\r\n  },\r\n  cell: {\r\n    position: 'absolute',\r\n    willChange: 'transform, width, height, opacity',\r\n  },\r\n}\r\n\r\nexport default class Grid extends React.Component {\r\n  static propTypes = {\r\n    data: PropTypes.array,\r\n    keys: PropTypes.func,\r\n    occupySpace: PropTypes.bool,\r\n    columns: PropTypes.number,\r\n    margin: PropTypes.number,\r\n    heights: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\r\n    lockScroll: PropTypes.bool,\r\n    closeDelay: PropTypes.number,\r\n  }\r\n  static defaultProps = {\r\n    occupySpace: true,\r\n    columns: 3,\r\n    margin: 0,\r\n    heights: 400,\r\n    lockScroll: false,\r\n    closeDelay: 0,\r\n  }\r\n  state = { width: 0, height: 0, open: undefined, lastOpen: undefined }\r\n  scrollOut = e => {\r\n    if (!this.props.lockScroll) {\r\n      this.state.open && this.toggle(undefined)\r\n      this.clicked = false\r\n    }\r\n  }\r\n  toggle = key =>\r\n    this.setState(\r\n      state => ({\r\n        lastOpen: state.open,\r\n        open: state.open === key ? undefined : key,\r\n      }),\r\n      () => (this.clicked = true)\r\n    )\r\n  resize = (width, height, props) =>\r\n    this.setState({\r\n      [width]: props.client.width,\r\n      [height]: props.client.height,\r\n    })\r\n  resizeOuter = props => this.resize('widthOuter', 'heightOuter', props)\r\n  resizeInner = props => this.resize('width', 'height', props)\r\n  update = ({ key, x, y, width, height }) => {\r\n    const open = this.state.open === key\r\n    return {\r\n      opacity: this.state.open && !open ? 0 : 1,\r\n      x: open ? this.outerRef.scrollLeft : x,\r\n      y: open ? this.outerRef.scrollTop : y,\r\n      width: open ? this.state.width : width,\r\n      height: open ? this.state.heightOuter : height,\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.clicked = false\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      children,\r\n      columns,\r\n      margin,\r\n      occupySpace,\r\n      impl,\r\n      config,\r\n      data,\r\n      keys,\r\n      heights,\r\n      closeDelay,\r\n      lockScroll,\r\n      ...rest\r\n    } = this.props\r\n    let { lastOpen, open, width } = this.state\r\n    let column = 0\r\n    let columnHeights = new Array(columns).fill(0)\r\n\r\n    let displayData = data.map((child, i) => {\r\n      let index = occupySpace\r\n        ? columnHeights.indexOf(Math.min(...columnHeights))\r\n        : column++ % columns\r\n      let cellWidth = width / columns - margin / (1 - 1 / (columns + 1))\r\n      let left = cellWidth * index\r\n      let offset = (index + 1) * margin\r\n      let top = columnHeights[index] + margin\r\n      let height = typeof heights === 'function' ? heights(child) : heights\r\n      columnHeights[index] += height + margin\r\n      return {\r\n        x: margin ? left + offset : left,\r\n        y: top,\r\n        width: cellWidth,\r\n        height,\r\n        key: keys(child),\r\n        object: child,\r\n      }\r\n    })\r\n    const overflow = lockScroll ? (open ? 'hidden' : 'auto') : 'auto'\r\n    const height = Math.max(...columnHeights) + margin\r\n    return (\r\n      <Measure\r\n        client\r\n        innerRef={r => (this.outerRef = r)}\r\n        onResize={this.resizeOuter}>\r\n        {({ measureRef }) => (\r\n          <div\r\n            ref={measureRef}\r\n            style={{ ...styles.outer, ...this.props.style, overflow }}\r\n            {...rest}\r\n            onScroll={this.scrollOut}\r\n            onWheel={this.scrollOut}\r\n            onTouchMove={this.scrollOut}>\r\n            <Measure\r\n              client\r\n              innerRef={r => (this.innerRef = r)}\r\n              onResize={this.resizeInner}>\r\n              {({ measureRef }) => (\r\n                <div ref={measureRef} style={{ ...styles.inner, height }}>\r\n                  <Transition\r\n                    native\r\n                    items={displayData}\r\n                    keys={d => d.key}\r\n                    from={{ opacity: 0 }}\r\n                    leave={{ opacity: 0 }}\r\n                    enter={this.update}\r\n                    update={this.update}\r\n                    impl={impl}\r\n                    config={{\r\n                      ...config,\r\n                      delay: this.clicked && !open ? closeDelay : 0,\r\n                    }}>\r\n                    {(c, i) => ({ opacity, x, y, width, height }) => (\r\n                      <animated.div\r\n                        style={{\r\n                          ...styles.cell,\r\n                          opacity,\r\n                          width,\r\n                          height,\r\n                          zIndex:\r\n                            lastOpen === c.key || open === c.key ? 1000 : i,\r\n                          transform: interpolate(\r\n                            [x, y],\r\n                            (x, y) => `translate3d(${x}px,${y}px, 0)`\r\n                          ),\r\n                        }}\r\n                        children={children(c.object, open === c.key, () =>\r\n                          this.toggle(c.key)\r\n                        )}\r\n                      />\r\n                    )}\r\n                  </Transition>\r\n                </div>\r\n              )}\r\n            </Measure>\r\n          </div>\r\n        )}\r\n      </Measure>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}