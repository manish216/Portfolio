{"ast":null,"code":"var _jsxFileName = \"A:\\\\EXCEL\\\\master's\\\\resume syncer\\\\portfolio\\\\src\\\\components\\\\GridForSkills\\\\Grid.jsx\";\nimport React, { useState, useRef, Component } from 'react';\nimport { useTransition, useSpring, useChain, config } from 'react-spring';\nimport { Global, Container, Item } from './styles';\nimport data from './data';\n\nclass Grid extends Component {\n  render() {\n    const [open, set] = useState(false);\n    const springRef = useRef();\n    const {\n      size,\n      opacity,\n      ...rest\n    } = useSpring({\n      ref: springRef,\n      config: config.stiff,\n      from: {\n        size: '20%',\n        background: 'hotpink'\n      },\n      to: {\n        size: open ? '100%' : '20%',\n        background: open ? 'white' : 'hotpink'\n      }\n    });\n    const transRef = useRef();\n    const transitions = useTransition(open ? data : [], item => item.name, {\n      ref: transRef,\n      unique: true,\n      trail: 400 / data.length,\n      from: {\n        opacity: 0,\n        transform: 'scale(0)'\n      },\n      enter: {\n        opacity: 1,\n        transform: 'scale(1)'\n      },\n      leave: {\n        opacity: 0,\n        transform: 'scale(0)'\n      }\n    }); // This will orchestrate the two animations above, comment the last arg and it creates a sequence\n\n    useChain(open ? [springRef, transRef] : [transRef, springRef], [0, open ? 0.1 : 0.6]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Global, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      style: { ...rest,\n        width: size,\n        height: size\n      },\n      onClick: () => set(open => !open),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, transitions.map(({\n      item,\n      key,\n      props\n    }) => /*#__PURE__*/React.createElement(Item, {\n      key: key,\n      style: { ...props,\n        background: item.css\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["A:/EXCEL/master's/resume syncer/portfolio/src/components/GridForSkills/Grid.jsx"],"names":["React","useState","useRef","Component","useTransition","useSpring","useChain","config","Global","Container","Item","data","Grid","render","open","set","springRef","size","opacity","rest","ref","stiff","from","background","to","transRef","transitions","item","name","unique","trail","length","transform","enter","leave","width","height","map","key","props","css"],"mappings":"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","sourcesContent":["import React, { useState, useRef,Component } from 'react';\r\nimport { useTransition, useSpring, useChain, config } from 'react-spring';\r\nimport { Global, Container, Item } from './styles';\r\nimport data from './data';\r\n\r\n\r\nclass Grid extends Component {\r\n\r\n\r\n    render() {\r\n        const [open, set] = useState(false)\r\n\r\n        const springRef = useRef()\r\n        const { size, opacity, ...rest } = useSpring({\r\n            ref: springRef,\r\n            config: config.stiff,\r\n            from: { size: '20%', background: 'hotpink' },\r\n            to: { size: open ? '100%' : '20%', background: open ? 'white' : 'hotpink' }\r\n        })\r\n\r\n        const transRef = useRef()\r\n        const transitions = useTransition(open ? data : [], item => item.name, {\r\n            ref: transRef,\r\n            unique: true,\r\n            trail: 400 / data.length,\r\n            from: { opacity: 0, transform: 'scale(0)' },\r\n            enter: { opacity: 1, transform: 'scale(1)' },\r\n            leave: { opacity: 0, transform: 'scale(0)' }\r\n        })\r\n\r\n        // This will orchestrate the two animations above, comment the last arg and it creates a sequence\r\n        useChain(open ? [springRef, transRef] : [transRef, springRef], [0, open ? 0.1 : 0.6])\r\n        return (\r\n            <>\r\n                <Global />\r\n                <Container style={{ ...rest, width: size, height: size }} onClick={() => set(open => !open)}>\r\n                    {transitions.map(({ item, key, props }) => (\r\n                        <Item key={key} style={{ ...props, background: item.css }} />\r\n                    ))}\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;"]},"metadata":{},"sourceType":"module"}